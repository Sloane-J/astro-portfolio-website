---
interface Props {
  as?: keyof HTMLElementTagNameMap;
  className?: string;
  cols?: 1 | 2 | 3 | 4 | 5 | 6;
  gap?: 'none' | 'sm' | 'md' | 'lg';
  items?: 'start' | 'center' | 'end' | 'stretch';
  justify?: 'start' | 'center' | 'end' | 'between' | 'around';
}

const {
  as: Element = 'div',
  className = '',
  cols = 3,
  gap = 'md',
  items = 'stretch',
  justify = 'start'
} = Astro.props;

const colsClass = {
  1: 'grid-cols-1',
  2: 'grid-cols-1 md:grid-cols-2',
  3: 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3',
  4: 'grid-cols-1 md:grid-cols-2 lg:grid-cols-4',
  5: 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5',
  6: 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6'
}[cols];

const gapClass = {
  none: 'gap-0',
  sm: 'gap-4',
  md: 'gap-6',
  lg: 'gap-8'
}[gap];

const itemsClass = {
  start: 'items-start',
  center: 'items-center',
  end: 'items-end',
  stretch: 'items-stretch'
}[items];

const justifyClass = {
  start: 'justify-start',
  center: 'justify-center',
  end: 'justify-end',
  between: 'justify-between',
  around: 'justify-around'
}[justify];
---

<Element
  class:list={[
    'grid',
    colsClass,
    gapClass,
    itemsClass,
    justifyClass,
    className
  ]}
>
  <slot />
</Element>

<style>
  .grid {
    display: grid;
    width: 100%;
  }

  /* Optional: Add animation for grid items */
  .grid > :global(*) {
    opacity: 0;
    animation: fadeIn 0.5s ease-out forwards;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Optional: Add stagger effect to children */
  .grid > :global(*:nth-child(1)) { animation-delay: 0.1s; }
  .grid > :global(*:nth-child(2)) { animation-delay: 0.2s; }
  .grid > :global(*:nth-child(3)) { animation-delay: 0.3s; }
  .grid > :global(*:nth-child(4)) { animation-delay: 0.4s; }
  .grid > :global(*:nth-child(5)) { animation-delay: 0.5s; }
  .grid > :global(*:nth-child(6)) { animation-delay: 0.6s; }
</style>

